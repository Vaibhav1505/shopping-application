#!/usr/bin/env node

/**
 * Module dependencies.
 */
const Chat = require('../models/chat.model');
var app = require("../app");
var debug = require("debug")("shopping-application:httpServer");
var http = require("http");
const {
    Server
} = require("socket.io");





/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP httpServer.
 */

var httpServer = http.createServer(app);

const io = new Server(httpServer, {});



io.on("connection", (socket) => {
    console.log("Socket Connected");



    socket.on('queryRoom', ({
        sender,
        orderId,
        content
    }) => {
        console.log({
            sender,
            orderId,
            content
        });

        new Chat({
            sender,
            orderId,
            content
        }).save();

        io.emit('queryRoom', {
            sender,
            orderId,
            content
        });
    });


});

io.on("disconnet", () => {
    console.log("Socket Disconnected!")

})

// io.on('queryRoom', function(msg) {
//     console.log('Message sent Successfully' + msg)
//     socket.broadcast.emit('queryRoom', msg);
// })

/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.listen(port);
httpServer.on("error", onError);
httpServer.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP httpServer "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP httpServer "listening" event.
 */

function onListening() {
    var addr = httpServer.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
}